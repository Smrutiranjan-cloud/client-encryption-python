import json
import os
from mastercard import encryption
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import rsa

# Initialize Mastercard encryption library with appropriate credentials
encryption_client = encryption.Client(
    public_key_path="path/to/public_key.pem",  # Path to the public key PEM file
    private_key_path="path/to/private_key.pem"  # Path to the private key PEM file
)

# Generate a random IV (Initialization Vector)
iv = os.urandom(16).hex()

# Generate a symmetric AES key (in this case we use 256 bits)
symmetric_key = os.urandom(32)  # 32 bytes for AES-256

# Encrypt data using AES (encryptedValue)
data_to_encrypt = b"Sensitive Data"
encrypted_value = encryption_client.encrypt(
    data_to_encrypt, 
    symmetric_key, 
    iv
)

# Encrypt the symmetric key (encryptedKey) using RSA with OAEP padding and SHA-512
public_key = encryption_client.get_public_key()
encrypted_key = public_key.encrypt(
    symmetric_key, 
    encryption.OAEP(
        mgf=hashes.MGF1(algorithm=hashes.SHA512()),
        algorithm=hashes.SHA512(),
        label=None
    )
)

# Get the public key fingerprint (for publicKeyFingerprint)
public_key_fingerprint = public_key.fingerprint()

# Prepare the JSON output
output = {
    "iv": iv,
    "encryptedKey": encrypted_key.hex(),
    "encryptedValue": encrypted_value.hex(),
    "publicKeyFingerprint": public_key_fingerprint,
    "oaepPaddingDigestAlgorithm": "SHA512"
}

# Output the JSON
print(json.dumps(output, indent=4))
